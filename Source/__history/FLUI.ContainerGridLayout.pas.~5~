unit FLUI.ContainerGridLayout;

interface

uses
  FLUI.Classes,
  System.Classes, System.SysUtils, System.Math,
  Vcl.Controls, Vcl.ExtCtrls;

type
  TFLUIContainerGridLayout = class(TCustomPanel)
  private
    FGridLayout: TFLUIGridLayoutSettings;
    procedure SetGridLayout(const Value: TFLUIGridLayoutSettings);
    procedure LayoutSettingsChanged(Sender: TObject);
  protected
    procedure Resize; override;
    procedure Notification(AComponent: TComponent; Operation: TOperation); override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
    procedure UpdateLayout;
  published
    property GridLayout: TFLUIGridLayoutSettings read FGridLayout write SetGridLayout;

    property Align;
    property Anchors;
    property BevelOuter;
    property Caption;
    property Constraints;
    property Padding;
    property ParentColor;
    property ParentBackground;
    property Visible;

  end;

procedure Register;

implementation

{ TFLUIContainerGridLayout }

constructor TFLUIContainerGridLayout.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);

  FGridLayout := TFLUIGridLayoutSettings.Create;
  FGridLayout.OnChange := LayoutSettingsChanged;
end;

destructor TFLUIContainerGridLayout.Destroy;
begin
  FGridLayout.Free;
  inherited Destroy;
end;

procedure TFLUIContainerGridLayout.LayoutSettingsChanged(Sender: TObject);
begin
  UpdateLayout;
end;

procedure TFLUIContainerGridLayout.Resize;
begin
  inherited;
  UpdateLayout;
end;

procedure TFLUIContainerGridLayout.Notification(AComponent: TComponent; Operation: TOperation);
begin
  inherited;
  if (Operation = opInsert) or (Operation = opRemove) then
  begin
    if AComponent.Owner = Self then
      UpdateLayout;
  end;
end;

procedure TFLUIContainerGridLayout.SetGridLayout(const Value: TFLUIGridLayoutSettings);
begin

  FGridLayout.Assign(Value);
end;

procedure TFLUIContainerGridLayout.UpdateLayout;
var
  I, Col, Row, VisibleControlCount, ColumnCount, ItemW, ItemH: Integer;
  X, Y, RowStartIndex, RowItemCount: Integer;
  TotalContentWidth, StartOffset, ActualGap: Integer;
  Child: TControl;
  VisibleControls: TList;
begin
  if (csLoading in ComponentState) or (FGridLayout = nil) then
    Exit;

  // 1. Coletar apenas os controles visíveis
  VisibleControls := TList.Create;
  try
    for I := 0 to ControlCount - 1 do
      if (Controls[I] is TWinControl) and Controls[I].Visible then
        VisibleControls.Add(Controls[I]);

    VisibleControlCount := VisibleControls.Count;
    if VisibleControlCount = 0 then Exit;

    // 2. Determinar o número de colunas
    ColumnCount := Trunc((Width - Padding.Left - Padding.Right + FGridLayout.Gap) / (FGridLayout.ItemWidth + FGridLayout.Gap));
    if ColumnCount > FGridLayout.MaxColumns then
      ColumnCount := FGridLayout.MaxColumns;
    if ColumnCount < 1 then
      ColumnCount := 1;

    // 3. Iterar por LINHAS para aplicar o alinhamento
    RowStartIndex := 0;
    while RowStartIndex < VisibleControlCount do
    begin
      // Determina quantos itens estão nesta linha específica
      RowItemCount := Min(ColumnCount, VisibleControlCount - RowStartIndex);
      Row := RowStartIndex div ColumnCount;

      // Determina a largura de cada item na linha
      if (RowItemCount = 1) then
        ItemW := Width - Padding.Left - Padding.Right
      else
        ItemW := Trunc((Width - Padding.Left - Padding.Right - (RowItemCount - 1) * FGridLayout.Gap) / RowItemCount);

      // Ajuste de largura fixa se o alinhamento não estica os itens
      if FGridLayout.Alignment <> TFLUIGridAlign.flaLeft then
      begin
          ItemW := FGridLayout.ItemWidth;
      end;

      // Calcular largura total do conteúdo e os espaçamentos baseados no alinhamento
      TotalContentWidth := (RowItemCount * ItemW) + (Max(0, RowItemCount - 1) * FGridLayout.Gap);
      StartOffset := 0;
      ActualGap := FGridLayout.Gap;

      case FGridLayout.Alignment of
        flaLeft:
          StartOffset := Padding.Left;
        flaRight:
          StartOffset := Width - Padding.Right - TotalContentWidth;
        flaCenter:
          StartOffset := Padding.Left + (Width - Padding.Left - Padding.Right - TotalContentWidth) div 2;
        flaSpaceBetween:
          begin
            StartOffset := Padding.Left;
            if RowItemCount > 1 then
              ActualGap := FGridLayout.Gap + (Width - Padding.Left - Padding.Right - TotalContentWidth) div (RowItemCount - 1);
          end;
        flaSpaceAround:
          begin
            if RowItemCount > 0 then
            begin
              ActualGap := FGridLayout.Gap + (Width - Padding.Left - Padding.Right - TotalContentWidth) div RowItemCount;
              StartOffset := Padding.Left + ActualGap div 2;
            end;
          end;
        flaSpaceEvenly:
          begin
            if RowItemCount > 0 then
            begin
              ActualGap := FGridLayout.Gap + (Width - Padding.Left - Padding.Right - TotalContentWidth) div (RowItemCount + 1);
              StartOffset := Padding.Left + ActualGap;
            end;
          end;
      end;


      for I := 0 to RowItemCount - 1 do
      begin
        Child := TControl(VisibleControls[RowStartIndex + I]);
        Col := I;

        if (ColumnCount = 1) and FGridLayout.SingleColumnAsRow then
          ItemH := FGridLayout.RowItemHeight
        else
          ItemH := FGridLayout.ItemHeight;

        X := StartOffset + Col * (ItemW + ActualGap);
        Y := Padding.Top + Row * (ItemH + FGridLayout.Gap);

        // Aplicar o novo posicionamento e tamanho
        Child.SetBounds(X, Y, ItemW, ItemH);
      end;

      // Avança para a próxima linha
      Inc(RowStartIndex, RowItemCount);
    end;
  finally
    VisibleControls.Free;
  end;
end;

procedure Register;
begin
  RegisterComponents('FLUI', [TFLUIContainerGridLayout]);
end;

end.
