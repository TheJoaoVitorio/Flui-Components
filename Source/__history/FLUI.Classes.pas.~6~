unit FLUI.Classes;

interface

uses
  System.Math,
  Vcl.Graphics, Classes, Types, SysUtils, Controls;

type
  TFLUIBorderSettings = class(TPersistent)
  private
    FOnChange: TNotifyEvent;
    FRadius: Integer;
    FBackgroundColor: TColor;
    FBorderColor: TColor;
    FBorderThickness: Integer;
    FBorderStyle: TPenStyle;
    FGradientStartColor: TColor;
    FGradientEndColor: TColor;
    // Setters
    procedure SetRadius(const Value: Integer);
    procedure SetBackgroundColor(const Value: TColor);
    procedure SetBorderColor(const Value: TColor);
    procedure SetBorderThickness(const Value: Integer);
    procedure SetBorderStyle(const Value: TPenStyle);
    procedure SetGradientStartColor(const Value: TColor);
    procedure SetGradientEndColor(const Value: TColor);
  protected
    procedure Changed; virtual;
  public
    constructor Create;
    procedure Assign(Source: TPersistent); override;
  published
    property Radius: Integer read FRadius write SetRadius default 24;
    property BackgroundColor: TColor read FBackgroundColor write SetBackgroundColor default clBtnFace;
    property BorderColor: TColor read FBorderColor write SetBorderColor default clWindowText;
    property BorderThickness: Integer read FBorderThickness write SetBorderThickness default 1;
    property BorderStyle: TPenStyle read FBorderStyle write SetBorderStyle default psSolid;
    property GradientStartColor: TColor read FGradientStartColor write SetGradientStartColor default clWhite;
    property GradientEndColor: TColor read FGradientEndColor write SetGradientEndColor default clSilver;
    property OnChange: TNotifyEvent read FOnChange write FOnChange;
  end;

implementation

{ TFLUIBorderSettings }
constructor TFLUIBorderSettings.Create;
begin
  inherited Create;
  FRadius := 24;
  FBackgroundColor := clBtnFace;
  FBorderColor := clWindowText;
  FBorderThickness := 1;
  FBorderStyle := psSolid;
  FGradientStartColor := clWhite;
  FGradientEndColor := clSilver;
end;

procedure TFLUIBorderSettings.Assign(Source: TPersistent);
begin
  if Source is TFLUIBorderSettings then
  begin
    Self.FRadius := TFLUIBorderSettings(Source).FRadius;
    Self.FBackgroundColor := TFLUIBorderSettings(Source).FBackgroundColor;
    Self.FBorderColor := TFLUIBorderSettings(Source).FBorderColor;
    Self.FBorderThickness := TFLUIBorderSettings(Source).FBorderThickness;
    Self.FBorderStyle := TFLUIBorderSettings(Source).FBorderStyle;
    Self.FGradientStartColor := TFLUIBorderSettings(Source).FGradientStartColor;
    // Add this
    Self.FGradientEndColor := TFLUIBorderSettings(Source).FGradientEndColor;
    // Add this
    Changed;
  end
  else
    inherited Assign(Source);
end;

procedure TFLUIBorderSettings.Changed;
begin
  if Assigned(FOnChange) then
    FOnChange(Self);
end;

procedure TFLUIBorderSettings.SetRadius(const Value: Integer);
begin
  if FRadius <> Value then
  begin
    FRadius := Max(0, Value);
    Changed;
  end;
end;

procedure TFLUIBorderSettings.SetBackgroundColor(const Value: TColor);
begin
  if FBackgroundColor <> Value then
  begin
    FBackgroundColor := Value;
    Changed;
  end;
end;

procedure TFLUIBorderSettings.SetBorderColor(const Value: TColor);
begin
  if FBorderColor <> Value then
  begin
    FBorderColor := Value;
    Changed;
  end;
end;

procedure TFLUIBorderSettings.SetBorderThickness(const Value: Integer);
begin
  if FBorderThickness <> Value then
  begin
    FBorderThickness := Max(0, Value);
    Changed;
  end;
end;

procedure TFLUIBorderSettings.SetBorderStyle(const Value: TPenStyle);
begin
  if FBorderStyle <> Value then
  begin
    FBorderStyle := Value;
    Changed;
  end;
end;

procedure TFLUIBorderSettings.SetGradientStartColor(const Value: TColor);
begin
  if FGradientStartColor <> Value then
  begin
    FGradientStartColor := Value;
    Changed;
  end;
end;

procedure TFLUIBorderSettings.SetGradientEndColor(const Value: TColor);
begin
  if FGradientEndColor <> Value then
  begin
    FGradientEndColor := Value;
    Changed;
  end;
end;





end.
